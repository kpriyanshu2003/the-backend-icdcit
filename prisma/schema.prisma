// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  age       Int
  gender    String?
  height    String
  weight    String
  bmi       Float
  email     String
  uid       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conditions      Condition[]
  recommendations Recommendation[]
  riskAssessment  RiskAssessment[]
  appointment     Appointment[]
  labResults      LabResult[]
}

model Condition {
  id           String        @id @default(cuid())
  name         String
  medication   String[]
  symptoms     String[]
  notes        String?
  imageUrl     String?
  createdAt    DateTime      @default(now())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  Appointments Appointment[]
}

model Appointment {
  id              String               @id @default(cuid())
  name            String
  appointmentDate String
  notes           String?
  imageUrl        String?
  createdAt       DateTime             @default(now())
  category        AppointmentCategory?
  userId          String
  isDigital       Boolean              @default(false)
  user            User                 @relation(fields: [userId], references: [id])
  conditionId     String?
  Condition       Condition?           @relation(fields: [conditionId], references: [id])
  LabResult       LabResult[]
  doctorId        String?
  Doctor          Doctor?              @relation(fields: [doctorId], references: [id])
}

model Doctor {
  id          String        @id @default(cuid())
  name        String
  phNo        String        @unique
  designation String
  rating      Int
  Appointment Appointment[]
}

model LabResult {
  id             String       @id @default(cuid())
  name           String
  value          String
  prediction     Float?
  unit           String?
  referenceRange String?
  createdAt      DateTime     @default(now())
  appointmentId  String?
  Appointment    Appointment? @relation(fields: [appointmentId], references: [id])
  userId         String?
  User           User?        @relation(fields: [userId], references: [id])
}

model Recommendation {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model RiskAssessment {
  id             String   @id @default(cuid())
  riskPercent    Float
  assessmentDate DateTime @default(now())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
}

enum AppointmentCategory {
  DAILY
  WEEKLY
  MONTHLY
  ANNUALLY
  QUARTERLY
  BI_ANNUALLY
  AS_NEEDED
}
